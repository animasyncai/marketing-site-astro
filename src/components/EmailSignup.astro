---
import { Icon } from 'astro-icon/components'
import { getTranslationsFromUrl, getTranslation } from '../utils/useTranslation.js'

interface Props {
  variant?: 'hero' | 'section' | 'footer'
  showLabels?: boolean
  placeholder?: string
  buttonText?: string
  class?: string
  title?: string
  description?: string
}

const {
  variant = 'section',
  showLabels = true,
  placeholder,
  buttonText,
  class: className,
  title,
  description,
} = Astro.props

// Get translations
const translations = await getTranslationsFromUrl(Astro.url.pathname)
const t = (key: string, fallback = '') => {
  return getTranslation(translations, key, {}, fallback)
}

// Generate unique IDs
const formId = `email-signup-${variant}`
const emailId = `${formId}-email`
const errorId = `${formId}-error`
const successId = `${formId}-success`
---

<div class:list={[className, 'email-signup w-full']} data-component="email-signup">
  {
    (title || description) && (
      <div class="mb-6 text-center">
        {title && <h3 class="mb-2 text-xl font-semibold text-gray-900">{title}</h3>}
        {description && <p class="text-gray-600">{description}</p>}
      </div>
    )
  }

  <form id={formId} class="space-y-4" novalidate data-form="email-signup">
    <!-- Honeypot -->
    <input type="text" name="website" tabindex="-1" class="sr-only" aria-hidden="true" />

    <!-- Email input group -->
    <div class="space-y-2">
      {
        showLabels && (
          <label for={emailId} class="block text-sm font-medium text-gray-700">
            {t('signup.emailPlaceholder', 'Email address')}
            <span class="text-red-500" aria-label="required">
              *
            </span>
          </label>
        )
      }

      <div class={`flex ${variant === 'hero' ? 'flex-col sm:flex-row' : 'flex-col'} gap-3`}>
        <div class="relative flex-1">
          <Icon name="lucide:mail" class="absolute top-1/2 left-3 h-5 w-5 -translate-y-1/2 text-gray-400" />
          <input
            type="email"
            id={emailId}
            name="email"
            class="h-11 w-full rounded-lg border border-gray-300 pr-4 pl-10 text-gray-900 placeholder-gray-500 transition-colors focus:border-transparent focus:ring-2 focus:ring-purple-500"
            placeholder={placeholder || t('signup.emailPlaceholder', 'Enter your email address')}
            aria-describedby={`${errorId} ${successId}`}
            required
          />
        </div>

        <button
          type="submit"
          class="flex h-11 min-w-[140px] items-center justify-center gap-2 rounded-lg bg-purple-600 px-6 font-medium text-white transition-colors hover:bg-purple-700 focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
          disabled={false}
        >
          <span class="button-text">
            {buttonText || t('signup.submitButton', 'Get Early Access')}
          </span>
          <span class="button-loading hidden items-center gap-2">
            <Icon name="lucide:loader-2" class="h-4 w-4 animate-spin" />
            {t('signup.loadingButton', 'Joining...')}
          </span>
        </button>
      </div>
    </div>

    <!-- Messages -->
    <div id={errorId} class="hidden rounded-lg border border-red-200 bg-red-50 p-3 text-sm text-red-700" role="alert">
      <div class="flex items-center gap-2">
        <Icon name="lucide:alert-circle" class="h-4 w-4 flex-shrink-0" />
        <span class="message-text"></span>
      </div>
    </div>

    <div
      id={successId}
      class="hidden rounded-lg border border-green-200 bg-green-50 p-3 text-sm text-green-700"
      role="status"
    >
      <div class="flex items-center gap-2">
        <Icon name="lucide:check-circle" class="h-4 w-4 flex-shrink-0" />
        <span class="message-text"></span>
      </div>
    </div>

    <!-- Privacy notice -->
    <p class="flex items-center justify-center gap-1 text-center text-xs text-gray-500">
      <Icon name="lucide:shield-check" class="h-3 w-3" />
      {t('signup.privacy', "We'll send you a personal note when doors open. No spam, ever.")}
    </p>
  </form>
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    const signupForms = document.querySelectorAll('[data-form="email-signup"]')

    signupForms.forEach((form) => {
      const emailInput = form.querySelector('input[type="email"]') as HTMLInputElement
      const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement
      const errorMessage = form.querySelector('[role="alert"]') as HTMLElement
      const successMessage = form.querySelector('[role="status"]') as HTMLElement
      const buttonText = submitButton?.querySelector('.button-text') as HTMLElement
      const buttonLoading = submitButton?.querySelector('.button-loading') as HTMLElement

      if (!emailInput || !submitButton || !errorMessage || !successMessage) return

      let isSubmitting = false

      const showMessage = (element: HTMLElement, message: string) => {
        const messageText = element.querySelector('.message-text') as HTMLElement
        if (messageText) {
          messageText.textContent = message
          element.classList.remove('hidden')
        }
      }

      const hideMessage = (element: HTMLElement) => {
        element.classList.add('hidden')
      }

      const hideAllMessages = () => {
        hideMessage(errorMessage)
        hideMessage(successMessage)
      }

      const setLoading = (loading: boolean) => {
        isSubmitting = loading
        submitButton.disabled = loading

        if (loading) {
          buttonText.classList.add('hidden')
          buttonLoading.classList.remove('hidden')
          buttonLoading.classList.add('flex')
        } else {
          buttonText.classList.remove('hidden')
          buttonLoading.classList.add('hidden')
          buttonLoading.classList.remove('flex')
        }
      }

      // Email validation
      const validateEmail = (email: string) => {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
        return emailRegex.test(email)
      }

      const getValidationMessage = (email: string) => {
        if (!email.trim()) return 'Email address is required'
        if (!validateEmail(email)) return 'Please enter a valid email address'
        if (email.length > 254) return 'Email address is too long'
        return null
      }

      // Real-time validation
      emailInput.addEventListener('input', hideAllMessages)

      // Form submission
      form.addEventListener('submit', async (e) => {
        e.preventDefault()

        if (isSubmitting) return

        const email = emailInput.value.trim()
        const honeypot = (form.querySelector('input[name="website"]') as HTMLInputElement)?.value

        // Check honeypot
        if (honeypot) return

        // Validate email
        const validationMessage = getValidationMessage(email)
        if (validationMessage) {
          showMessage(errorMessage, validationMessage)
          emailInput.focus()
          return
        }

        hideAllMessages()
        setLoading(true)

        try {
          const response = await fetch('/api/signup', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              email,
              source: 'website',
              timestamp: Date.now(),
            }),
          })

          const result = await response.json()

          if (response.ok && result.success) {
            showMessage(successMessage, result.message || "Welcome! We'll be in touch soon.")
            emailInput.value = ''

            // Track conversion
            if (typeof gtag !== 'undefined') {
              gtag('event', 'signup', {
                event_category: 'engagement',
                event_label: 'email_signup',
              })
            }
          } else {
            showMessage(errorMessage, result.message || 'Something went wrong. Please try again.')
          }
        } catch (error) {
          showMessage(errorMessage, 'Network error. Please check your connection and try again.')
        } finally {
          setLoading(false)
        }
      })
    })
  })
</script>
