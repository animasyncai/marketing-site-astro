---
import ResponsiveToggle from './ResponsiveToggle.astro'
import Logo from './Logo.astro'

/**
 * Navigation Component
 *
 * @description A component that displays the navigation menu for the website
 */
---

<div id="main-navigation" class="py-8">
  <div class="flex flex-wrap items-center justify-between">
    <Logo />
    <div class="flex items-center gap-4">
      <nav class="desktop-menu hidden md:block" aria-label="Main navigation desktop" role="navigation">
        <ul class="flex list-none gap-4" role="menubar">
          <slot />
        </ul>
      </nav>
      <ResponsiveToggle />
    </div>
    <nav class="mobile-menu hidden md:hidden" aria-label="Main navigation mobile" role="navigation">
      <ul class="flex list-none flex-col items-start gap-4" role="menubar">
        <slot />
      </ul>
    </nav>
  </div>
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    // variables
    const mainNav = document.querySelector('#main-navigation') as HTMLElement | null
    if (!mainNav) return

    const mainMenu = mainNav.querySelector('ul') as HTMLUListElement | null
    const dropdownMenus = [...document.querySelectorAll('.has-dropdown button')] as HTMLButtonElement[]

    // functions
    const setActiveMenuItem = (): void => {
      const mobileDesktopMenus = mainNav.querySelectorAll('nav > ul')
      const currentPathname = window.location.pathname

      mobileDesktopMenus.forEach((menu) => {
        const menuItems = [...menu.querySelectorAll('a:not([rel*="external"])')] as HTMLAnchorElement[]

        menuItems.forEach((menuItem) => {
          if (currentPathname.includes(menuItem.pathname.replaceAll('/', '')) && menuItem.textContent !== 'Home') {
            menuItem.classList.add('is-active')
            menuItem.setAttribute('aria-current', 'page')
            menuItem.setAttribute('tabindex', '0')
          } else if (menuItem.textContent === 'Home' && currentPathname === '/') {
            menuItem.classList.add('is-active')
            menuItem.setAttribute('aria-current', 'page')
            menuItem.setAttribute('tabindex', '0')
          } else {
            menuItem.removeAttribute('aria-current')
          }
        })
      })
    }

    const isOutOfViewport = (element: Element): boolean => {
      const elementBounds = element.getBoundingClientRect()
      return elementBounds.right > (window.innerWidth || document.documentElement.clientWidth)
    }

    const openDropdownMenu = (dropdownMenu: HTMLButtonElement): void => {
      const dropdownList = dropdownMenu.parentNode?.querySelector('ul') as HTMLUListElement | null
      if (!dropdownList) return

      dropdownMenu.classList.add('show')
      dropdownMenu.setAttribute('aria-expanded', 'true')
      dropdownList.setAttribute('aria-hidden', 'false')

      // Focus the first item in the dropdown
      const firstItem = dropdownList.querySelector('a, button') as HTMLElement
      if (firstItem) {
        firstItem.focus()
      }

      if (isOutOfViewport(dropdownList)) {
        dropdownList.style.left = 'auto'
      }
    }

    const closeDropdownMenu = (dropdownMenu: HTMLButtonElement): void => {
      const dropdownList = dropdownMenu.parentNode?.querySelector('ul') as HTMLUListElement | null
      dropdownMenu.classList.remove('show')
      dropdownMenu.setAttribute('aria-expanded', 'false')
      if (dropdownList) {
        dropdownList.setAttribute('aria-hidden', 'true')
      }
    }

    const closeAllDropdownMenus = (): void => {
      for (let i = 0; i < dropdownMenus.length; i++) {
        closeDropdownMenu(dropdownMenus[i])
      }
    }

    const toggleDropdownMenu = (event: MouseEvent): void => {
      const target = event.target as HTMLButtonElement
      if (target.getAttribute('aria-expanded') === 'false') {
        closeAllDropdownMenus()
        openDropdownMenu(target)
      } else {
        closeDropdownMenu(target)
      }
    }

    // Enhanced keyboard navigation
    const handleMenuKeydown = (event: KeyboardEvent) => {
      if (!mainMenu) return

      const element = event.target as Element
      const currentMenuItem = element.closest('li')
      const menuItems = [...mainMenu.querySelectorAll('.menu-item')] as HTMLLIElement[]
      const currentDropdownMenu = element.closest('.has-dropdown button') as HTMLButtonElement | null
      const currentDropdownMenuItem = element.closest('.has-dropdown li') as HTMLLIElement | null
      const currentIndex = currentMenuItem ? menuItems.findIndex((item) => item === currentMenuItem) : -1

      const key = event.key
      let targetItem: Element | null = null

      // Horizontal navigation for main menu items
      if (key === 'ArrowRight') {
        event.preventDefault()
        if (currentMenuItem && menuItems.indexOf(currentMenuItem as HTMLLIElement) === menuItems.length - 1) {
          targetItem = menuItems[0]
        } else if (currentMenuItem) {
          targetItem = menuItems[currentIndex + 1]
        }
      }

      if (key === 'ArrowLeft') {
        event.preventDefault()
        if (currentMenuItem && menuItems.indexOf(currentMenuItem as HTMLLIElement) === 0) {
          targetItem = menuItems[menuItems.length - 1]
        } else if (currentMenuItem) {
          targetItem = menuItems[currentIndex - 1]
        }
      }

      if (key === 'Home') {
        event.preventDefault()
        targetItem = menuItems[0]
      }

      if (key === 'End') {
        event.preventDefault()
        targetItem = menuItems[menuItems.length - 1]
      }

      if (key === 'Escape') {
        event.preventDefault()
        closeAllDropdownMenus()
        targetItem = menuItems[0]
      }

      // Dropdown menu navigation
      if (currentDropdownMenu) {
        const nextElement = currentDropdownMenu.nextElementSibling as Element | null
        if (nextElement) {
          const firstDropdownItem = nextElement.querySelector('a, button') as HTMLElement

          if (key === 'ArrowDown' || key === 'Enter' || key === ' ') {
            event.preventDefault()
            openDropdownMenu(currentDropdownMenu)
            targetItem = firstDropdownItem
          }
        }
      }

      if (currentDropdownMenuItem) {
        const currentDropdownList = currentDropdownMenuItem.parentNode as Element | null
        if (currentDropdownList) {
          const dropdownMenuItems = [...currentDropdownList.querySelectorAll('a, button')] as HTMLElement[]
          const currentIndex = dropdownMenuItems.findIndex((item) => item === currentDropdownMenuItem)

          if (key === 'ArrowDown') {
            event.preventDefault()
            if (dropdownMenuItems.indexOf(currentDropdownMenuItem) === dropdownMenuItems.length - 1) {
              targetItem = dropdownMenuItems[0]
            } else {
              targetItem = dropdownMenuItems[currentIndex + 1]
            }
          }

          if (key === 'ArrowUp') {
            event.preventDefault()
            if (dropdownMenuItems.indexOf(currentDropdownMenuItem) === 0) {
              targetItem = dropdownMenuItems[dropdownMenuItems.length - 1]
            } else {
              targetItem = dropdownMenuItems[currentIndex - 1]
            }
          }

          if (key === 'Escape') {
            event.preventDefault()
            const currentDropdownMenu = currentDropdownList.previousElementSibling as HTMLButtonElement | null
            if (currentDropdownMenu) {
              targetItem = currentDropdownMenu
              closeAllDropdownMenus()
            }
          }
        }
      }

      if (targetItem && 'focus' in targetItem) {
        ;(targetItem as HTMLElement).focus()
      }
    }

    // execution
    if (mainMenu) {
      mainMenu.addEventListener('keydown', handleMenuKeydown)
    }

    dropdownMenus &&
      dropdownMenus.forEach((dropdownMenu) => {
        dropdownMenu.addEventListener('click', toggleDropdownMenu as EventListener)
      })

    setActiveMenuItem()
    window.addEventListener('click', (event: MouseEvent) => {
      const element = event.target as Element
      if (!element.hasAttribute('aria-haspopup') && !element.classList.contains('submenu-item')) {
        closeAllDropdownMenus()
      }
    })
  })
</script>
