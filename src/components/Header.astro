---
import Logo from './Logo.astro'
import Button from './Button.astro'
import LanguagePicker from './LanguagePicker.astro'
import { Icon } from 'astro-icon/components'
import { getTranslationsFromUrl, getTranslation } from '../utils/useTranslation.js'

// Get translations for current language
const translations = await getTranslationsFromUrl(Astro.url.pathname)
const t = (key: string, fallback = '') => {
  return getTranslation(translations, key, {}, fallback)
}
---

<header class="sticky top-0 z-50 border-b border-gray-200/80 bg-white/95 backdrop-blur-sm">
  <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
    <div class="flex h-16 items-center justify-between">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <Logo variant="header" />
      </div>

      <!-- Desktop Navigation -->
      <nav class="hidden items-center space-x-8 md:flex" aria-label="Main navigation">
        <a href="#how-it-works" class="text-sm font-medium text-gray-600 transition-colors hover:text-gray-900">
          {t('navigation.howItWorks')}
        </a>
        <a href="#pricing" class="text-sm font-medium text-gray-600 transition-colors hover:text-gray-900">
          {t('navigation.pricing')}
        </a>
        <a href="/privacy" class="text-sm font-medium text-gray-600 transition-colors hover:text-gray-900">
          {t('navigation.privacy')}
        </a>
      </nav>

      <!-- Right side actions -->
      <div class="flex items-center space-x-3">
        <!-- Language picker -->
        <div class="hidden sm:block">
          <LanguagePicker variant="toggle" />
        </div>

        <!-- Main CTA Button -->
        <Button href="#early-access" size="sm" variant="primary" class="hidden sm:inline-flex">
          {t('navigation.joinEarlyAccess')}
        </Button>

        <!-- Mobile menu button -->
        <button
          type="button"
          class="rounded-lg p-2 text-gray-600 transition-colors hover:bg-gray-100 hover:text-gray-900 md:hidden"
          aria-expanded="false"
          aria-controls="mobile-menu"
          data-mobile-menu-toggle
        >
          <span class="sr-only">Open menu</span>
          <Icon name="lucide:menu" class="h-5 w-5" data-menu-icon />
          <Icon name="lucide:x" class="hidden h-5 w-5" data-close-icon />
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile menu -->
  <div class="hidden border-t border-gray-200 bg-white/95 backdrop-blur-sm md:hidden" id="mobile-menu" data-mobile-menu>
    <div class="space-y-4 px-4 py-6">
      <nav class="space-y-4" aria-label="Mobile navigation">
        <a href="#how-it-works" class="block py-2 font-medium text-gray-600 transition-colors hover:text-gray-900">
          {t('navigation.howItWorks')}
        </a>
        <a href="#pricing" class="block py-2 font-medium text-gray-600 transition-colors hover:text-gray-900">
          {t('navigation.pricing')}
        </a>
        <a href="/privacy" class="block py-2 font-medium text-gray-600 transition-colors hover:text-gray-900">
          {t('navigation.privacy')}
        </a>
      </nav>

      <div class="space-y-4 border-t border-gray-200 pt-4">
        <!-- Language picker for mobile -->
        <div class="flex items-center justify-between">
          <span class="text-sm text-gray-600">Language</span>
          <LanguagePicker variant="toggle" />
        </div>

        <!-- Mobile CTA -->
        <Button href="#early-access" size="md" variant="primary" fullWidth icon="lucide:arrow-right">
          {t('navigation.joinEarlyAccess')}
        </Button>
      </div>
    </div>
  </div>
</header>

<script>
  document.addEventListener('astro:page-load', () => {
    const mobileMenuToggle = document.querySelector('[data-mobile-menu-toggle]')
    const mobileMenu = document.querySelector('[data-mobile-menu]')
    const menuIcon = document.querySelector('[data-menu-icon]')
    const closeIcon = document.querySelector('[data-close-icon]')

    if (!mobileMenuToggle || !mobileMenu || !menuIcon || !closeIcon) return

    mobileMenuToggle.addEventListener('click', () => {
      const isExpanded = mobileMenuToggle.getAttribute('aria-expanded') === 'true'

      mobileMenuToggle.setAttribute('aria-expanded', (!isExpanded).toString())

      if (isExpanded) {
        mobileMenu.classList.add('hidden')
        menuIcon.classList.remove('hidden')
        closeIcon.classList.add('hidden')
      } else {
        mobileMenu.classList.remove('hidden')
        menuIcon.classList.add('hidden')
        closeIcon.classList.remove('hidden')
      }
    })

    // Close mobile menu when clicking on a link
    const mobileLinks = mobileMenu.querySelectorAll('a')
    mobileLinks.forEach((link) => {
      link.addEventListener('click', () => {
        mobileMenu.classList.add('hidden')
        mobileMenuToggle.setAttribute('aria-expanded', 'false')
        menuIcon.classList.remove('hidden')
        closeIcon.classList.add('hidden')
      })
    })

    // Add smooth scrolling for anchor links
    document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault()
        const target = document.querySelector(this.getAttribute('href'))
        if (target) {
          const headerHeight = 64 // Account for sticky header
          const targetPosition = target.offsetTop - headerHeight
          window.scrollTo({
            top: targetPosition,
            behavior: 'smooth',
          })
        }
      })
    })
  })
</script>
