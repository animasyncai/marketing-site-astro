---
import Logo from './Logo.astro'
import Button from './Button.astro'
import LanguagePicker from './LanguagePicker.astro'
import { Icon } from 'astro-icon/components'
import { getTranslationsFromUrl, getTranslation } from '../utils/useTranslation.js'

// Get translations for current language
const translations = await getTranslationsFromUrl(Astro.url.pathname)
const t = (key: string, fallback = '') => {
  return getTranslation(translations, key, {}, fallback)
}

// Skip link for accessibility
const skipLinkId = 'main-content'
---

<!-- Skip Links for Accessibility -->
<a href={`#${skipLinkId}`} class="skip-link">
  {t('navigation.skipToMain')}
</a>

<header
  class="sticky top-0 z-50 border-b border-gray-200/80 bg-white/95 backdrop-blur-sm transition-all duration-200"
  role="banner"
>
  <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
    <div class="flex h-16 items-center justify-between">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <Logo variant="header" />
      </div>

      <!-- Desktop Navigation -->
      <nav class="hidden items-center space-x-8 md:flex" aria-label={t('navigation.menuLabel')} role="navigation">
        <a
          href="#how-it-works"
          class="nav-link text-sm font-medium text-gray-600 transition-colors hover:text-gray-900"
          data-nav-item
        >
          {t('navigation.howItWorks')}
        </a>
        <a
          href="#why-withinly"
          class="nav-link text-sm font-medium text-gray-600 transition-colors hover:text-gray-900"
          data-nav-item
        >
          {t('navigation.features')}
        </a>
        <a
          href="#forCouples"
          class="nav-link text-sm font-medium text-gray-600 transition-colors hover:text-gray-900"
          data-nav-item
        >
          {t('navigation.couples')}
        </a>
        <a
          href="#faq"
          class="nav-link text-sm font-medium text-gray-600 transition-colors hover:text-gray-900"
          data-nav-item
        >
          {t('navigation.faq')}
        </a>
      </nav>

      <!-- Right side actions -->
      <div class="flex items-center space-x-3">
        <!-- Language picker (desktop) -->
        <div class="hidden sm:block">
          <LanguagePicker variant="toggle" />
        </div>

        <!-- Main CTA Button -->
        <Button href="#early-access" size="sm" variant="primary" class="hidden sm:inline-flex" icon="lucide:rocket">
          {t('navigation.joinEarlyAccess')}
        </Button>

        <!-- Mobile menu button -->
        <button
          type="button"
          class="mobile-menu-toggle rounded-lg p-2 text-gray-600 transition-colors hover:bg-gray-100 hover:text-gray-900 md:hidden"
          aria-expanded="false"
          aria-controls="mobile-menu"
          aria-label={t('navigation.openMenu')}
          data-mobile-menu-toggle
        >
          <Icon name="lucide:menu" class="h-5 w-5" data-menu-icon />
          <Icon name="lucide:x" class="hidden h-5 w-5" data-close-icon />
          <span class="menu-text sr-only">{t('navigation.openMenu')}</span>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile menu -->
  <div
    class="mobile-menu hidden border-t border-gray-200 bg-white/95 backdrop-blur-sm md:hidden"
    id="mobile-menu"
    data-mobile-menu
    role="navigation"
    aria-label={t('navigation.menuLabel')}
  >
    <div class="space-y-4 px-4 py-6">
      <!-- Mobile navigation links -->
      <nav class="space-y-4" role="none">
        <a
          href="#how-it-works"
          class="mobile-nav-link block py-2 font-medium text-gray-600 transition-colors hover:text-gray-900"
          data-mobile-nav-item
        >
          {t('navigation.howItWorks')}
        </a>
        <a
          href="#features"
          class="mobile-nav-link block py-2 font-medium text-gray-600 transition-colors hover:text-gray-900"
          data-mobile-nav-item
        >
          {t('navigation.features')}
        </a>
        <a
          href="#faq"
          class="mobile-nav-link block py-2 font-medium text-gray-600 transition-colors hover:text-gray-900"
          data-mobile-nav-item
        >
          {t('navigation.faq')}
        </a>
        <a
          href="#privacy"
          class="mobile-nav-link block py-2 font-medium text-gray-600 transition-colors hover:text-gray-900"
          data-mobile-nav-item
        >
          {t('navigation.privacy')}
        </a>
      </nav>

      <!-- Mobile bottom section -->
      <div class="space-y-4 border-t border-gray-200 pt-4">
        <!-- Language picker for mobile -->
        <div class="flex items-center justify-between">
          <span class="text-sm font-medium text-gray-600">{t('navigation.currentLanguage')}</span>
          <LanguagePicker variant="toggle" />
        </div>

        <!-- Mobile CTA -->
        <Button href="#early-access" size="md" variant="primary" fullWidth icon="lucide:rocket" iconPosition="right">
          {t('navigation.joinEarlyAccess')}
        </Button>
      </div>
    </div>
  </div>
</header>

<script>
  // Header interaction functionality
  document.addEventListener('astro:page-load', () => {
    const header = document.querySelector('header') as HTMLElement
    const mobileMenuToggle = document.querySelector('[data-mobile-menu-toggle]') as HTMLButtonElement
    const mobileMenu = document.querySelector('[data-mobile-menu]') as HTMLElement
    const menuIcon = document.querySelector('[data-menu-icon]') as HTMLElement
    const closeIcon = document.querySelector('[data-close-icon]') as HTMLElement
    const menuText = document.querySelector('.menu-text') as HTMLElement

    if (!mobileMenuToggle || !mobileMenu || !menuIcon || !closeIcon) return

    // Get translations for dynamic text
    const openText = mobileMenuToggle.getAttribute('aria-label') || 'Open menu'
    const closeText = openText.replace('Open', 'Close') || 'Close menu'

    // Mobile menu toggle functionality
    const toggleMobileMenu = () => {
      const isExpanded = mobileMenuToggle.getAttribute('aria-expanded') === 'true'
      const newExpanded = !isExpanded

      mobileMenuToggle.setAttribute('aria-expanded', newExpanded.toString())
      mobileMenuToggle.setAttribute('aria-label', newExpanded ? closeText : openText)

      if (newExpanded) {
        // Open menu
        mobileMenu.classList.remove('hidden')
        menuIcon.classList.add('hidden')
        closeIcon.classList.remove('hidden')
        if (menuText) menuText.textContent = closeText

        // Prevent body scroll when menu is open
        document.body.style.overflow = 'hidden'
      } else {
        // Close menu
        mobileMenu.classList.add('hidden')
        menuIcon.classList.remove('hidden')
        closeIcon.classList.add('hidden')
        if (menuText) menuText.textContent = openText

        // Restore body scroll
        document.body.style.overflow = ''
      }
    }

    // Event listeners
    mobileMenuToggle.addEventListener('click', toggleMobileMenu)

    // Close mobile menu when clicking on navigation links
    const mobileNavLinks = mobileMenu.querySelectorAll('[data-mobile-nav-item]')
    mobileNavLinks.forEach((link) => {
      link.addEventListener('click', () => {
        mobileMenu.classList.add('hidden')
        mobileMenuToggle.setAttribute('aria-expanded', 'false')
        mobileMenuToggle.setAttribute('aria-label', openText)
        menuIcon.classList.remove('hidden')
        closeIcon.classList.add('hidden')
        if (menuText) menuText.textContent = openText
        document.body.style.overflow = ''
      })
    })

    // Close mobile menu on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && mobileMenuToggle.getAttribute('aria-expanded') === 'true') {
        toggleMobileMenu()
      }
    })

    // Smooth scrolling for anchor links
    const addSmoothScrolling = () => {
      document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
        anchor.addEventListener('click', (e) => {
          e.preventDefault()
          const href = (e.currentTarget as HTMLAnchorElement).getAttribute('href')
          const target = document.querySelector(href || '') as HTMLElement
          if (target) {
            // Get the current header height
            const getHeaderHeight = () => {
              const currentHeader = document.querySelector('header') as HTMLElement
              return currentHeader?.offsetHeight || 64
            }

            const headerHeight = getHeaderHeight()
            const targetPosition = target.offsetTop - headerHeight - 24 // Extra 24px spacing for better visual separation

            // Scroll to the target position with smooth behavior
            window.scrollTo({
              top: targetPosition,
              behavior: 'smooth',
            })
          }
        })
      })
    }

    // Active navigation highlighting
    const highlightActiveNavItem = () => {
      // Wait for the page to be fully loaded and then find all sections
      const findSections = () => {
        // Only look for sections and main content areas, not all elements with IDs
        const sections = document.querySelectorAll('section[id], main[id], [id].nav-target')
        const navItems = document.querySelectorAll('[data-nav-item], [data-mobile-nav-item]')

        // If no sections found, retry later
        if (sections.length === 0) {
          return false
        }

        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                const sectionId = entry.target.id

                // Remove active class from all nav items
                navItems.forEach((item) => {
                  item.classList.remove('nav-active')
                })

                // Add active class to corresponding nav items
                const activeItems = document.querySelectorAll(`[href="#${sectionId}"]`)
                activeItems.forEach((item) => {
                  item.classList.add('nav-active')
                })
              }
            })
          },
          {
            rootMargin: '-20% 0px -70% 0px', // Trigger when section is roughly in center
            threshold: 0.1,
          }
        )

        sections.forEach((section) => {
          observer.observe(section)
        })

        return true
      }

      // Try to find sections multiple times with increasing delays
      let attempts = 0
      const maxAttempts = 5

      const tryFindSections = () => {
        if (attempts >= maxAttempts) return

        if (!findSections()) {
          attempts++
          setTimeout(tryFindSections, 200 * attempts)
        }
      }

      tryFindSections()

      // Also use a mutation observer to catch any dynamically added sections
      const mutationObserver = new MutationObserver((mutations) => {
        let shouldReinitialize = false
        mutations.forEach((mutation) => {
          if (mutation.type === 'childList') {
            mutation.addedNodes.forEach((node) => {
              if (node.nodeType === Node.ELEMENT_NODE && (node as Element).id) {
                shouldReinitialize = true
              }
            })
          }
        })
        if (shouldReinitialize) {
          setTimeout(findSections, 100)
        }
      })

      mutationObserver.observe(document.body, {
        childList: true,
        subtree: true,
      })
    }

    // Header scroll effects - simplified to only add scrolled class
    const handleHeaderScroll = () => {
      const updateHeader = () => {
        const currentScrollY = window.scrollY

        if (currentScrollY > 100) {
          header?.classList.add('header-scrolled')
        } else {
          header?.classList.remove('header-scrolled')
        }
      }

      const onScroll = () => {
        requestAnimationFrame(updateHeader)
      }

      window.addEventListener('scroll', onScroll)
    }

    // Initialize all functionality
    addSmoothScrolling()

    // Initialize active navigation highlighting with proper timing
    // Use requestAnimationFrame to ensure DOM is fully ready
    requestAnimationFrame(() => {
      highlightActiveNavItem()
    })

    handleHeaderScroll()

    // Clean up on page unload
    window.addEventListener('beforeunload', () => {
      document.body.style.overflow = ''
    })
  })
</script>

<style lang="scss">
  @use '../assets/scss/base/mixins' as *;
  @use '../assets/scss/base/breakpoint' as *;

  // Skip link styling
  .skip-link {
    position: absolute;
    top: -46px;
    left: 6px;
    z-index: 100;
    transition: top var(--animation-speed-fast) var(--cubic-bezier);
    border-radius: var(--radius-m);
    background: var(--color-primary-600);
    padding: 8px 16px;
    color: white;
    font-weight: 500;
    text-decoration: none;

    &:focus {
      top: 6px;
    }
  }

  // Header scroll effects
  header {
    transition: all var(--animation-speed-medium) var(--cubic-bezier);

    &.header-scrolled {
      backdrop-filter: blur(12px);
      box-shadow: var(--elevation-2);
      border-bottom-color: rgba(229, 231, 235, 0.8);
      background-color: rgba(255, 255, 255, 0.98);
    }
  }

  // Navigation link styles
  .nav-link,
  .mobile-nav-link {
    position: relative;
    transition: all var(--animation-speed-fast) var(--cubic-bezier);

    &:hover {
      @include text-decoration(transparent, var(--color-primary-600), 2px, 2px, 4px, 2px);
    }

    &.nav-active {
      color: var(--color-primary);
      font-weight: 600;

      &::after {
        position: absolute;
        bottom: -8px;
        left: 50%;
        transform: translateX(-50%);
        border-radius: 50%;
        background: var(--color-primary);
        width: 6px;
        height: 6px;
        content: '';

        @include breakpoint(m) {
          bottom: -12px;
        }
      }
    }
  }

  // Mobile menu improvements
  .mobile-menu {
    animation: slideDown var(--animation-speed-medium) var(--cubic-bezier);

    &.hidden {
      animation: slideUp var(--animation-speed-fast) var(--cubic-bezier);
    }
  }

  // Mobile menu toggle improvements
  .mobile-menu-toggle {
    position: relative;

    &:focus-visible {
      @include outline;
    }

    [data-menu-icon],
    [data-close-icon] {
      transition: all var(--animation-speed-fast) var(--cubic-bezier);
    }

    &[aria-expanded='true'] {
      [data-menu-icon] {
        transform: rotate(90deg);
      }
    }
  }

  // Animations
  @keyframes slideDown {
    from {
      transform: translateY(-10px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  @keyframes slideUp {
    from {
      transform: translateY(0);
      opacity: 1;
    }
    to {
      transform: translateY(-10px);
      opacity: 0;
    }
  }

  // Accessibility improvements
  @media (prefers-reduced-motion: reduce) {
    header,
    .nav-link,
    .mobile-nav-link,
    .mobile-menu-toggle * {
      animation: none;
      transition: none;
    }

    .mobile-menu {
      &.hidden {
        display: none;
      }
    }
  }

  // High contrast mode
  @media (prefers-contrast: high) {
    header {
      border-bottom: 2px solid var(--foreground-color);
    }

    .nav-link,
    .mobile-nav-link {
      &.nav-active {
        border-radius: var(--radius-s);
        background-color: var(--color-primary-600);
        padding: 4px 8px;
        color: white;
      }
    }
  }

  // Focus management for mobile menu
  .mobile-menu {
    &:not(.hidden) {
      .mobile-nav-link:first-child {
        // Ensure first link gets focus when menu opens
        scroll-margin-top: var(--space-l);
      }
    }
  }
</style>
