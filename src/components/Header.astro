---
import Logo from './Logo.astro'
import Button from './Button.astro'
import LanguagePicker from './LanguagePicker.astro'
import { Icon } from 'astro-icon/components'
import { getTranslationsFromUrl, getTranslation } from '../utils/useTranslation.js'

// Get translations for current language
const translations = await getTranslationsFromUrl(Astro.url.pathname)
const t = (key: string, fallback = '') => {
  return getTranslation(translations, key, {}, fallback)
}

// Skip link for accessibility
const skipLinkId = 'main-content'
---

<!-- Skip Links for Accessibility -->
<a href={`#${skipLinkId}`} class="skip-link" tabindex="1">
  {t('navigation.skipToMain')}
</a>

<header
  class="sticky top-0 z-50 border-b border-gray-200/80 bg-white/95 backdrop-blur-sm transition-all duration-200"
  role="banner"
>
  <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
    <div class="flex h-16 items-center justify-between">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <Logo variant="header" />
      </div>

      <!-- Desktop Navigation -->
      <nav class="hidden items-center space-x-8 md:flex" aria-label={t('navigation.menuLabel')} role="navigation">
        <ul class="flex items-center space-x-8" role="menubar">
          <li role="none">
            <a
              href="#how-it-works"
              class="nav-link focus:ring-primary-600 rounded-md px-2 py-1 text-sm font-medium text-gray-600 transition-colors hover:text-gray-900 focus:ring-2 focus:ring-offset-2 focus:outline-none"
              data-nav-item
              role="menuitem"
              tabindex="0"
            >
              {t('navigation.howItWorks')}
            </a>
          </li>
          <li role="none">
            <a
              href="#why-withinly"
              class="nav-link focus:ring-primary-600 rounded-md px-2 py-1 text-sm font-medium text-gray-600 transition-colors hover:text-gray-900 focus:ring-2 focus:ring-offset-2 focus:outline-none"
              data-nav-item
              role="menuitem"
              tabindex="0"
            >
              {t('navigation.features')}
            </a>
          </li>
          <li role="none">
            <a
              href="#forCouples"
              class="nav-link focus:ring-primary-600 rounded-md px-2 py-1 text-sm font-medium text-gray-600 transition-colors hover:text-gray-900 focus:ring-2 focus:ring-offset-2 focus:outline-none"
              data-nav-item
              role="menuitem"
              tabindex="0"
            >
              {t('navigation.couples')}
            </a>
          </li>
          <li role="none">
            <a
              href="#faq"
              class="nav-link focus:ring-primary-600 rounded-md px-2 py-1 text-sm font-medium text-gray-600 transition-colors hover:text-gray-900 focus:ring-2 focus:ring-offset-2 focus:outline-none"
              data-nav-item
              role="menuitem"
              tabindex="0"
            >
              {t('navigation.faq')}
            </a>
          </li>
        </ul>
      </nav>

      <!-- Right side actions -->
      <div class="flex items-center space-x-3">
        <!-- Language picker (desktop) -->
        <div class="hidden sm:block">
          <LanguagePicker variant="toggle" />
        </div>

        <!-- Main CTA Button -->
        <Button href="#early-access" size="sm" variant="primary" class="hidden sm:inline-flex" icon="lucide:rocket">
          {t('navigation.joinEarlyAccess')}
        </Button>

        <!-- Mobile menu button -->
        <button
          type="button"
          class="mobile-menu-toggle focus:ring-primary-600 rounded-lg p-2 text-gray-600 transition-colors hover:bg-gray-100 hover:text-gray-900 focus:ring-2 focus:ring-offset-2 focus:outline-none md:hidden"
          aria-expanded="false"
          aria-controls="mobile-menu"
          aria-label={t('navigation.openMenu')}
          aria-haspopup="true"
          data-mobile-menu-toggle
        >
          <Icon name="lucide:menu" class="h-5 w-5" data-menu-icon aria-hidden="true" />
          <Icon name="lucide:x" class="hidden h-5 w-5" data-close-icon aria-hidden="true" />
          <span class="menu-text sr-only">{t('navigation.openMenu')}</span>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile menu -->
  <div
    class="mobile-menu hidden border-t border-gray-200 bg-white/95 backdrop-blur-sm md:hidden"
    id="mobile-menu"
    data-mobile-menu
    role="navigation"
    aria-label={t('navigation.menuLabel')}
    aria-hidden="true"
  >
    <div class="space-y-4 px-4 py-6">
      <!-- Mobile navigation links -->
      <nav class="space-y-4" role="none">
        <ul class="space-y-4" role="menubar">
          <li role="none">
            <a
              href="#how-it-works"
              class="mobile-nav-link focus:ring-primary-600 block rounded-md px-2 py-2 font-medium text-gray-600 transition-colors hover:text-gray-900 focus:ring-2 focus:ring-offset-2 focus:outline-none"
              data-mobile-nav-item
              role="menuitem"
              tabindex="-1"
            >
              {t('navigation.howItWorks')}
            </a>
          </li>
          <li role="none">
            <a
              href="#features"
              class="mobile-nav-link focus:ring-primary-600 block rounded-md px-2 py-2 font-medium text-gray-600 transition-colors hover:text-gray-900 focus:ring-2 focus:ring-offset-2 focus:outline-none"
              data-mobile-nav-item
              role="menuitem"
              tabindex="-1"
            >
              {t('navigation.features')}
            </a>
          </li>
          <li role="none">
            <a
              href="#forCouples"
              class="mobile-nav-link focus:ring-primary-600 block rounded-md px-2 py-2 font-medium text-gray-600 transition-colors hover:text-gray-900 focus:ring-2 focus:ring-offset-2 focus:outline-none"
              data-nav-item
              role="menuitem"
              tabindex="0"
            >
              {t('navigation.couples')}
            </a>
          </li>
          <li role="none">
            <a
              href="#faq"
              class="mobile-nav-link focus:ring-primary-600 block rounded-md px-2 py-2 font-medium text-gray-600 transition-colors hover:text-gray-900 focus:ring-2 focus:ring-offset-2 focus:outline-none"
              data-mobile-nav-item
              role="menuitem"
              tabindex="-1"
            >
              {t('navigation.faq')}
            </a>
          </li>
        </ul>
      </nav>

      <!-- Mobile bottom section -->
      <div class="space-y-4 border-t border-gray-200 pt-4">
        <!-- Language picker for mobile -->
        <div class="flex items-center justify-between">
          <span class="text-sm font-medium text-gray-600">{t('navigation.currentLanguage')}</span>
          <LanguagePicker variant="toggle" />
        </div>

        <!-- Mobile CTA -->
        <Button href="#early-access" size="md" variant="primary" fullWidth icon="lucide:rocket" iconPosition="right">
          {t('navigation.joinEarlyAccess')}
        </Button>
      </div>
    </div>
  </div>
</header>

<script>
  // Header interaction functionality
  document.addEventListener('astro:page-load', () => {
    const header = document.querySelector('header') as HTMLElement
    const mobileMenuToggle = document.querySelector('[data-mobile-menu-toggle]') as HTMLButtonElement
    const mobileMenu = document.querySelector('[data-mobile-menu]') as HTMLElement
    const menuIcon = document.querySelector('[data-menu-icon]') as HTMLElement
    const closeIcon = document.querySelector('[data-close-icon]') as HTMLElement
    const menuText = document.querySelector('.menu-text') as HTMLElement

    if (!mobileMenuToggle || !mobileMenu || !menuIcon || !closeIcon) return

    // Get translations for dynamic text
    const openText = mobileMenuToggle.getAttribute('aria-label') || 'Open menu'
    const closeText = openText.replace('Open', 'Close') || 'Close menu'

    // Focus management
    let previousActiveElement: HTMLElement | null = null

    // Mobile menu toggle functionality
    const toggleMobileMenu = () => {
      const isExpanded = mobileMenuToggle.getAttribute('aria-expanded') === 'true'
      const newExpanded = !isExpanded

      mobileMenuToggle.setAttribute('aria-expanded', newExpanded.toString())
      mobileMenuToggle.setAttribute('aria-label', newExpanded ? closeText : openText)
      mobileMenu.setAttribute('aria-hidden', (!newExpanded).toString())

      if (newExpanded) {
        // Open menu
        mobileMenu.classList.remove('hidden')
        menuIcon.classList.add('hidden')
        closeIcon.classList.remove('hidden')
        if (menuText) menuText.textContent = closeText

        // Store the currently focused element
        previousActiveElement = document.activeElement as HTMLElement

        // Focus the first menu item
        const firstMenuItem = mobileMenu.querySelector('[data-mobile-nav-item]') as HTMLElement
        if (firstMenuItem) {
          firstMenuItem.tabIndex = 0
          firstMenuItem.focus()
        }

        // Prevent body scroll when menu is open
        document.body.style.overflow = 'hidden'
      } else {
        // Close menu
        mobileMenu.classList.add('hidden')
        menuIcon.classList.remove('hidden')
        closeIcon.classList.add('hidden')
        if (menuText) menuText.textContent = openText

        // Restore focus to the toggle button
        mobileMenuToggle.focus()

        // Restore body scroll
        document.body.style.overflow = ''
      }
    }

    // Event listeners
    mobileMenuToggle.addEventListener('click', toggleMobileMenu)

    // Close mobile menu when clicking on navigation links
    const mobileNavLinks = mobileMenu.querySelectorAll('[data-mobile-nav-item]')
    mobileNavLinks.forEach((link) => {
      link.addEventListener('click', () => {
        mobileMenu.classList.add('hidden')
        mobileMenuToggle.setAttribute('aria-expanded', 'false')
        mobileMenuToggle.setAttribute('aria-label', openText)
        mobileMenu.setAttribute('aria-hidden', 'true')
        menuIcon.classList.remove('hidden')
        closeIcon.classList.add('hidden')
        if (menuText) menuText.textContent = openText
        document.body.style.overflow = ''

        // Restore focus to toggle button
        mobileMenuToggle.focus()
      })
    })

    // Enhanced keyboard navigation for mobile menu
    const handleMobileMenuKeydown = (e: KeyboardEvent) => {
      const currentElement = e.target as HTMLElement
      const menuItems = Array.from(mobileMenu.querySelectorAll('[data-mobile-nav-item]')) as HTMLElement[]
      const currentIndex = menuItems.indexOf(currentElement)

      switch (e.key) {
        case 'Escape':
          e.preventDefault()
          toggleMobileMenu()
          break
        case 'ArrowDown':
          e.preventDefault()
          const nextIndex = (currentIndex + 1) % menuItems.length
          menuItems[nextIndex].focus()
          break
        case 'ArrowUp':
          e.preventDefault()
          const prevIndex = currentIndex === 0 ? menuItems.length - 1 : currentIndex - 1
          menuItems[prevIndex].focus()
          break
        case 'Home':
          e.preventDefault()
          menuItems[0].focus()
          break
        case 'End':
          e.preventDefault()
          menuItems[menuItems.length - 1].focus()
          break
      }
    }

    // Add keyboard navigation to mobile menu items
    mobileNavLinks.forEach((link) => {
      link.addEventListener('keydown', handleMobileMenuKeydown as EventListener)
    })

    // Close mobile menu on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && mobileMenuToggle.getAttribute('aria-expanded') === 'true') {
        toggleMobileMenu()
      }
    })

    // Smooth scrolling for anchor links
    const addSmoothScrolling = () => {
      document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
        anchor.addEventListener('click', (e) => {
          e.preventDefault()
          const href = (e.currentTarget as HTMLAnchorElement).getAttribute('href')
          const target = document.querySelector(href || '') as HTMLElement
          if (target) {
            // Get the current header height
            const getHeaderHeight = () => {
              const currentHeader = document.querySelector('header') as HTMLElement
              return currentHeader?.offsetHeight || 64
            }

            const headerHeight = getHeaderHeight()
            const targetPosition = target.offsetTop - headerHeight - 24 // Extra 24px spacing for better visual separation

            // Scroll to the target position with smooth behavior
            window.scrollTo({
              top: targetPosition,
              behavior: 'smooth',
            })
          }
        })
      })
    }

    // Active navigation highlighting
    const highlightActiveNavItem = () => {
      // Wait for the page to be fully loaded and then find all sections
      const findSections = () => {
        // Only look for sections and main content areas, not all elements with IDs
        const sections = document.querySelectorAll('section[id], main[id], [id].nav-target')
        const navItems = document.querySelectorAll('[data-nav-item], [data-mobile-nav-item]')

        // If no sections found, retry later
        if (sections.length === 0) {
          return false
        }

        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                const sectionId = entry.target.id

                // Remove active class from all nav items
                navItems.forEach((item) => {
                  item.classList.remove('nav-active')
                })

                // Add active class to corresponding nav items
                const activeItems = document.querySelectorAll(`[href="#${sectionId}"]`)
                activeItems.forEach((item) => {
                  item.classList.add('nav-active')
                })
              }
            })
          },
          {
            rootMargin: '-20% 0px -70% 0px', // Trigger when section is roughly in center
            threshold: 0.1,
          }
        )

        sections.forEach((section) => {
          observer.observe(section)
        })

        return true
      }

      // Try to find sections multiple times with increasing delays
      let attempts = 0
      const maxAttempts = 5

      const tryFindSections = () => {
        if (attempts >= maxAttempts) return

        if (!findSections()) {
          attempts++
          setTimeout(tryFindSections, 200 * attempts)
        }
      }

      tryFindSections()

      // Also use a mutation observer to catch any dynamically added sections
      const mutationObserver = new MutationObserver((mutations) => {
        let shouldReinitialize = false
        mutations.forEach((mutation) => {
          if (mutation.type === 'childList') {
            mutation.addedNodes.forEach((node) => {
              if (node.nodeType === Node.ELEMENT_NODE && (node as Element).id) {
                shouldReinitialize = true
              }
            })
          }
        })
        if (shouldReinitialize) {
          setTimeout(findSections, 100)
        }
      })

      mutationObserver.observe(document.body, {
        childList: true,
        subtree: true,
      })
    }

    // Header scroll effects - simplified to only add scrolled class
    const handleHeaderScroll = () => {
      const updateHeader = () => {
        const currentScrollY = window.scrollY

        if (currentScrollY > 100) {
          header?.classList.add('header-scrolled')
        } else {
          header?.classList.remove('header-scrolled')
        }
      }

      const onScroll = () => {
        requestAnimationFrame(updateHeader)
      }

      window.addEventListener('scroll', onScroll)
    }

    // Initialize all functionality
    addSmoothScrolling()

    // Initialize active navigation highlighting with proper timing
    // Use requestAnimationFrame to ensure DOM is fully ready
    requestAnimationFrame(() => {
      highlightActiveNavItem()
    })

    handleHeaderScroll()

    // Clean up on page unload
    window.addEventListener('beforeunload', () => {
      document.body.style.overflow = ''
    })
  })
</script>
