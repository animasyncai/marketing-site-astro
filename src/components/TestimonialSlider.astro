---
/**
 * TestimonialSlider Component - Refined
 *
 * @description Clean testimonial display with optional auto-advance
 */

import { Icon } from 'astro-icon/components'
import { getTranslationsFromUrl, getTranslation } from '../utils/useTranslation.js'

interface Props {
  class?: string
  autoPlay?: boolean
  interval?: number
}

const { class: className, autoPlay = false, interval = 6000 } = Astro.props

// Get translations for current language
const translations = await getTranslationsFromUrl(Astro.url.pathname)
const t = (key: string, fallback = '') => {
  return getTranslation(translations, key, {}, fallback)
}

// Get testimonials from translations
const testimonials = translations.testimonials?.items || []
---

<section class:list={[className, "py-20 bg-white"]}>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-16">
      <h2 class="text-3xl sm:text-4xl font-bold text-gray-900 mb-4">
        {t('testimonials.headline')}
      </h2>
      <p class="text-xl text-gray-600">
        Hear from people who are already exploring their inner patterns
      </p>
    </div>

    {autoPlay ? (
      <!-- Auto-advancing slider for larger testimonial sets -->
      <div 
        class="relative max-w-4xl mx-auto"
        data-component="testimonial-slider"
        data-auto-play={autoPlay}
        data-interval={interval}
      >
        <!-- Slider controls -->
        <div class="flex justify-between items-center mb-8">
          <button 
            class="p-2 text-gray-400 hover:text-gray-600 transition-colors rounded-lg hover:bg-gray-100"
            aria-label="Previous testimonial"
            data-action="prev"
          >
            <Icon name="lucide:chevron-left" class="w-6 h-6" />
          </button>
          
          <div class="text-sm text-gray-500">
            <span data-current>1</span> / <span data-total>{testimonials.length}</span>
          </div>
          
          <button 
            class="p-2 text-gray-400 hover:text-gray-600 transition-colors rounded-lg hover:bg-gray-100"
            aria-label="Next testimonial"
            data-action="next"
          >
            <Icon name="lucide:chevron-right" class="w-6 h-6" />
          </button>
        </div>

        <!-- Testimonial content -->
        <div class="relative overflow-hidden min-h-[200px]">
          {testimonials.map((testimonial, index) => (
            <div 
              class={`absolute inset-0 transition-all duration-500 ${index === 0 ? 'opacity-100 translate-x-0' : 'opacity-0 translate-x-full'}`}
              data-slide={index}
            >
              <div class="bg-gray-50 rounded-2xl p-8 text-center">
                <Icon name="lucide:quote" class="w-8 h-8 text-purple-300 mx-auto mb-4" />
                <blockquote class="text-xl text-gray-700 mb-6 italic leading-relaxed">
                  "{testimonial.quote}"
                </blockquote>
                <cite class="text-lg font-medium text-gray-900">
                  — {testimonial.author}
                </cite>
              </div>
            </div>
          ))}
        </div>

        <!-- Indicators -->
        <div class="flex justify-center gap-2 mt-6">
          {testimonials.map((_, index) => (
            <button
              class={`w-2 h-2 rounded-full transition-colors ${index === 0 ? 'bg-purple-600' : 'bg-gray-300'}`}
              aria-label={`Go to testimonial ${index + 1}`}
              data-indicator={index}
            />
          ))}
        </div>
      </div>
    ) : (
      <!-- Simple grid for static display -->
      <div class="grid md:grid-cols-3 gap-8">
        {testimonials.map(testimonial => (
          <div class="bg-gray-50 rounded-2xl p-6 hover:shadow-md transition-shadow">
            <Icon name="lucide:quote" class="w-6 h-6 text-purple-300 mb-4" />
            <blockquote class="text-gray-700 mb-4 italic leading-relaxed">
              "{testimonial.quote}"
            </blockquote>
            <cite class="text-sm font-medium text-gray-900">
              — {testimonial.author}
            </cite>
          </div>
        ))}
      </div>
    )}
  </div>
</section>

{autoPlay && (
  <script>
    document.addEventListener('astro:page-load', () => {
      const slider = document.querySelector('[data-component="testimonial-slider"]')
      if (!slider) return

      const slides = slider.querySelectorAll('[data-slide]')
      const indicators = slider.querySelectorAll('[data-indicator]')
      const prevBtn = slider.querySelector('[data-action="prev"]')
      const nextBtn = slider.querySelector('[data-action="next"]')
      const currentSpan = slider.querySelector('[data-current]')

      let currentIndex = 0
      let intervalId: number | null = null
      const interval = parseInt(slider.getAttribute('data-interval') || '6000')

      const updateSlide = (newIndex: number) => {
        // Hide current slide
        slides[currentIndex]?.classList.add('opacity-0', 'translate-x-full')
        slides[currentIndex]?.classList.remove('opacity-100', 'translate-x-0')
        indicators[currentIndex]?.classList.remove('bg-purple-600')
        indicators[currentIndex]?.classList.add('bg-gray-300')

        // Update index
        currentIndex = newIndex

        // Show new slide
        slides[currentIndex]?.classList.remove('opacity-0', 'translate-x-full')
        slides[currentIndex]?.classList.add('opacity-100', 'translate-x-0')
        indicators[currentIndex]?.classList.add('bg-purple-600')
        indicators[currentIndex]?.classList.remove('bg-gray-300')

        // Update counter
        if (currentSpan) currentSpan.textContent = (currentIndex + 1).toString()
      }

      const nextSlide = () => {
        const newIndex = (currentIndex + 1) % slides.length
        updateSlide(newIndex)
      }

      const prevSlide = () => {
        const newIndex = currentIndex === 0 ? slides.length - 1 : currentIndex - 1
        updateSlide(newIndex)
      }

      const startAutoPlay = () => {
        if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) return
        intervalId = window.setInterval(nextSlide, interval)
      }

      const stopAutoPlay = () => {
        if (intervalId) {
          clearInterval(intervalId)
          intervalId = null
        }
      }

      // Event listeners
      prevBtn?.addEventListener('click', () => {
        stopAutoPlay()
        prevSlide()
        startAutoPlay()
      })

      nextBtn?.addEventListener('click', () => {
        stopAutoPlay()
        nextSlide()
        startAutoPlay()
      })

      // Indicator clicks
      indicators.forEach((indicator, index) => {
        indicator.addEventListener('click', () => {
          stopAutoPlay()
          updateSlide(index)
          startAutoPlay()
        })
      })

      // Pause on hover
      slider.addEventListener('mouseenter', stopAutoPlay)
      slider.addEventListener('mouseleave', startAutoPlay)

      // Start auto-play
      startAutoPlay()
    })
  </script>
)}