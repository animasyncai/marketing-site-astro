---
import { Icon } from 'astro-icon/components'
import { 
  SUPPORTED_LANGUAGES, 
  getLanguageFromUrl, 
  getLocalizedPath
} from '../utils/i18n.js'

interface Props {
  class?: string
  variant?: 'dropdown' | 'toggle'
}

const { class: className, variant = 'toggle' } = Astro.props

// Get current language
const currentLanguage = getLanguageFromUrl(Astro.url.pathname)
const currentLangData = SUPPORTED_LANGUAGES[currentLanguage]

// Get the clean path for language switching
const cleanPath = Astro.url.pathname.replace(/^\/(en|lt)(?=\/|$)/, '') || '/'

// Generate language options
const languageOptions = Object.values(SUPPORTED_LANGUAGES).map(lang => ({
  ...lang,
  url: getLocalizedPath(cleanPath, lang.code),
  isCurrent: lang.code === currentLanguage,
}))
---

{variant === 'toggle' ? (
  <!-- Simple clean toggle -->
  <div class:list={[className, "flex items-center"]}>
    {languageOptions
      .filter(lang => !lang.isCurrent)
      .map(lang => (
        <a 
          href={lang.url}
          class="flex items-center gap-1.5 px-2 py-1 text-sm text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-md transition-colors"
          aria-label={`Switch to ${lang.name}`}
          data-language={lang.code}
        >
          <Icon name="lucide:globe" class="w-4 h-4" />
          <span>{lang.name}</span>
        </a>
      ))
    }
  </div>
) : (
  <!-- Dropdown version -->
  <div class:list={[className, "relative"]} data-component="language-picker">
    <button 
      class="flex items-center gap-1.5 px-2 py-1 text-sm text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-md transition-colors"
      aria-haspopup="true"
      aria-expanded="false"
      data-trigger="language-picker"
    >
      <Icon name="lucide:globe" class="w-4 h-4" />
      <span>{currentLangData?.name || 'EN'}</span>
      <Icon name="lucide:chevron-down" class="w-3 h-3 transition-transform" />
    </button>
    
    <div class="absolute top-full right-0 mt-1 py-1 bg-white border border-gray-200 rounded-lg shadow-lg min-w-[120px] hidden" data-menu>
      {languageOptions.map(lang => (
        lang.isCurrent ? (
          <div class="px-3 py-2 text-sm text-gray-900 bg-gray-50 flex items-center gap-2">
            <Icon name="lucide:check" class="w-3 h-3" />
            {lang.name}
          </div>
        ) : (
          <a 
            href={lang.url}
            class="block px-3 py-2 text-sm text-gray-600 hover:text-gray-900 hover:bg-gray-50 transition-colors"
            data-language={lang.code}
          >
            {lang.name}
          </a>
        )
      ))}
    </div>
  </div>
)}

<script>
  document.addEventListener('astro:page-load', () => {
    const pickers = document.querySelectorAll('[data-component="language-picker"]')
    
    pickers.forEach(picker => {
      const trigger = picker.querySelector('[data-trigger="language-picker"]') as HTMLButtonElement
      const menu = picker.querySelector('[data-menu]') as HTMLElement
      
      if (!trigger || !menu) return
      
      trigger.addEventListener('click', () => {
        const isOpen = trigger.getAttribute('aria-expanded') === 'true'
        trigger.setAttribute('aria-expanded', (!isOpen).toString())
        
        if (isOpen) {
          menu.classList.add('hidden')
          trigger.querySelector('svg:last-child')?.classList.remove('rotate-180')
        } else {
          menu.classList.remove('hidden')
          trigger.querySelector('svg:last-child')?.classList.add('rotate-180')
        }
      })
      
      // Close on outside click
      document.addEventListener('click', (e) => {
        if (!picker.contains(e.target as Node)) {
          menu.classList.add('hidden')
          trigger.setAttribute('aria-expanded', 'false')
          trigger.querySelector('svg:last-child')?.classList.remove('rotate-180')
        }
      })
      
      // Handle language persistence
      const languageLinks = picker.querySelectorAll('a[data-language]')
      languageLinks.forEach(link => {
        link.addEventListener('click', () => {
          const targetLang = link.getAttribute('data-language')
          if (targetLang && typeof localStorage !== 'undefined') {
            localStorage.setItem('withinly-language', targetLang)
          }
        })
      })
    })
  })
</script>