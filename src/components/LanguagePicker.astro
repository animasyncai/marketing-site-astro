---
/**
 * LanguagePicker Component
 *
 * @description Accessible language switcher that maintains current page context
 * Follows WCAG 2.2 AA guidelines with proper ARIA labels and keyboard navigation
 */

import { Icon } from 'astro-icon/components'
import { SUPPORTED_LANGUAGES, getLanguageFromUrl, getLocalizedPath } from '../utils/i18n.js'
import { getTranslationsFromUrl } from '../utils/useTranslation.js'

interface Props {
  /**
   * Additional classes to apply to the LanguagePicker
   */
  class?: string
  /**
   * Display style: 'dropdown' or 'toggle'
   */
  variant?: 'dropdown' | 'toggle'
}

const { class: className, variant = 'dropdown' } = Astro.props

// Get current language and translations
const currentLanguage = getLanguageFromUrl(Astro.url.pathname)
const translations = await getTranslationsFromUrl(Astro.url.pathname)
const currentLangData = SUPPORTED_LANGUAGES[currentLanguage as keyof typeof SUPPORTED_LANGUAGES]

// Get the clean path for language switching
const cleanPath = Astro.url.pathname.replace(/^\/(en|lt)(?=\/|$)/, '') || '/'

// Generate language options
const languageOptions = Object.values(SUPPORTED_LANGUAGES).map((lang) => ({
  ...lang,
  url: getLocalizedPath(cleanPath, lang.code),
  isCurrent: lang.code === currentLanguage,
  ariaLabel: lang.code === 'en' ? `Switch to ${lang.name}` : `Perjungti Ä¯ ${lang.name}`,
}))
---

<div>
  {
    variant === 'toggle' ? (
      <div class:list={[className, 'language-toggle']}>
        {languageOptions
          .filter((lang) => !lang.isCurrent)
          .map((lang) => (
            <a
              href={lang.url}
              class="language-toggle-link"
              aria-label={lang.ariaLabel}
              title={lang.ariaLabel}
              hreflang={lang.locale}
              data-language={lang.code}
            >
              <Icon name="lucide:globe" />
              <span class="language-name">{lang.name}</span>
            </a>
          ))}
      </div>
    ) : (
      <div class:list={[className, 'language-picker']} data-component="language-picker">
        <button
          class="language-picker-trigger"
          aria-haspopup="true"
          aria-expanded="false"
          aria-label={(translations as any).navigation?.switchLanguage || 'Switch language'}
          data-trigger="language-picker"
        >
          <Icon name="lucide:globe" />
          <span class="current-language">{currentLangData.name}</span>
          <Icon name="lucide:chevron-down" class="chevron" />
        </button>

        <ul class="language-picker-menu" role="menu" aria-label="Language options">
          {languageOptions.map((lang) => (
            <li role="none">
              {lang.isCurrent ? (
                <span
                  class="language-option current"
                  role="menuitem"
                  aria-current="true"
                  aria-label={`${lang.name} (current language)`}
                >
                  <Icon name="lucide:check" />
                  <span class="language-name">{lang.name}</span>
                </span>
              ) : (
                <a
                  href={lang.url}
                  class="language-option"
                  role="menuitem"
                  aria-label={lang.ariaLabel}
                  hreflang={lang.locale}
                  data-language={lang.code}
                >
                  <span class="language-name">{lang.name}</span>
                  <Icon name="lucide:external-link" class="external-icon" />
                </a>
              )}
            </li>
          ))}
        </ul>
      </div>
    )
  }
</div>

<script>
  // Client-side functionality for language picker
  document.addEventListener('astro:page-load', () => {
    const languagePickers = document.querySelectorAll('[data-component="language-picker"]')

    languagePickers.forEach((picker) => {
      const trigger = picker.querySelector('[data-trigger="language-picker"]') as HTMLButtonElement
      const menu = picker.querySelector('.language-picker-menu') as HTMLElement

      if (!trigger || !menu) return

      // Toggle dropdown
      const toggleDropdown = (open?: boolean) => {
        const isOpen = open !== undefined ? open : trigger.getAttribute('aria-expanded') === 'false'

        trigger.setAttribute('aria-expanded', isOpen.toString())

        if (isOpen) {
          trigger.classList.add('open')
          menu.style.display = 'block'
          // Focus first menu item
          const firstItem = menu.querySelector('[role="menuitem"]') as HTMLElement
          if (firstItem) firstItem.focus()
        } else {
          trigger.classList.remove('open')
          menu.style.display = 'none'
        }
      }

      // Close dropdown
      const closeDropdown = () => toggleDropdown(false)

      // Event listeners
      trigger.addEventListener('click', (e) => {
        e.preventDefault()
        toggleDropdown()
      })

      // Keyboard navigation
      picker.addEventListener('keydown', (e: Event) => {
        const keyEvent = e as KeyboardEvent
        const isOpen = trigger.getAttribute('aria-expanded') === 'true'

        if (keyEvent.key === 'Escape') {
          closeDropdown()
          trigger.focus()
        }

        if (keyEvent.key === 'ArrowDown' && !isOpen) {
          keyEvent.preventDefault()
          toggleDropdown(true)
        }

        if (isOpen) {
          const menuItems = Array.from(menu.querySelectorAll('[role="menuitem"]')) as HTMLElement[]
          const currentIndex = menuItems.findIndex((item) => item === document.activeElement)

          if (keyEvent.key === 'ArrowDown') {
            keyEvent.preventDefault()
            const nextIndex = (currentIndex + 1) % menuItems.length
            menuItems[nextIndex]?.focus()
          }

          if (keyEvent.key === 'ArrowUp') {
            keyEvent.preventDefault()
            const prevIndex = currentIndex <= 0 ? menuItems.length - 1 : currentIndex - 1
            menuItems[prevIndex]?.focus()
          }

          if (keyEvent.key === 'Enter' || keyEvent.key === ' ') {
            const activeItem = document.activeElement as HTMLAnchorElement
            if (activeItem && activeItem.href) {
              keyEvent.preventDefault()
              // Persist language choice before navigation
              if (typeof localStorage !== 'undefined') {
                const targetLang = activeItem.getAttribute('data-language')
                if (targetLang) {
                  localStorage.setItem('withinly-language', targetLang)
                }
              }
              window.location.href = activeItem.href
            }
          }
        }
      })

      // Close on outside click
      document.addEventListener('click', (e: MouseEvent) => {
        if (!picker.contains(e.target as Node)) {
          closeDropdown()
        }
      })

      // Handle language link clicks to persist preference
      const languageLinks = picker.querySelectorAll('a[data-language]')
      languageLinks.forEach((link) => {
        link.addEventListener('click', (e) => {
          const targetLang = link.getAttribute('data-language')
          if (targetLang && typeof localStorage !== 'undefined') {
            localStorage.setItem('withinly-language', targetLang)
          }
        })
      })
    })
  })
</script>

<style lang="scss">
  @use '../assets/scss/base/mixins' as *;

  .language-toggle {
    display: flex;
    align-items: center;
  }

  .language-toggle-link {
    display: flex;
    align-items: center;
    gap: var(--space-3xs);
    transition: color var(--animation-speed-fast) var(--cubic-bezier);
    color: var(--foreground-color);
    text-decoration: none;

    &:where(:hover, :focus-visible) {
      color: var(--link-hover-color);
      text-decoration: underline;
    }

    svg {
      width: 20px;
      height: 20px;
    }

    .language-name {
      font-size: var(--font-size--1);
    }
  }

  .language-picker {
    display: inline-block;
    position: relative;
  }

  .language-picker-trigger {
    display: flex;
    align-items: center;
    gap: var(--space-3xs);
    transition: all var(--animation-speed-fast) var(--cubic-bezier);
    cursor: pointer;
    border: none;
    background: transparent;
    padding: var(--space-3xs) var(--space-2xs);
    color: var(--foreground-color);

    &:where(:hover, :focus-visible) {
      border-radius: var(--radius-s);
      background-color: var(--border-color-subtle);
      color: var(--link-hover-color);
    }

    svg {
      width: 18px;
      height: 18px;
    }

    .chevron {
      transition: transform var(--animation-speed-fast) var(--cubic-bezier);
    }

    &.open .chevron {
      transform: rotate(180deg);
    }

    .current-language {
      font-weight: 500;
      font-size: var(--font-size--1);
    }
  }

  .language-picker-menu {
    display: none;
    position: absolute;
    top: 100%;
    right: 0;
    z-index: 100;
    margin: 0;
    box-shadow: var(--elevation-4);
    border: 2px solid var(--border-color-subtle);
    border-radius: var(--radius-l);
    background-color: var(--background-color);
    padding: var(--space-xs);
    min-width: 160px;
    list-style: none;

    @media (prefers-reduced-motion: no-preference) {
      animation: slideIn var(--animation-speed-fast) var(--cubic-bezier);
    }
  }

  .language-option {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: var(--space-2xs);
    transition: background-color var(--animation-speed-fast) var(--cubic-bezier);
    border-radius: var(--radius-s);
    padding: var(--space-2xs) var(--space-xs);
    width: 100%;
    color: var(--foreground-color);
    text-decoration: none;

    &:where(:hover, :focus) {
      outline: none;
      background-color: var(--border-color-subtle);
    }

    &.current {
      background-color: var(--link-color);
      color: var(--background-color);
      font-weight: 500;

      svg {
        width: 16px;
        height: 16px;
      }
    }

    .language-name {
      font-size: var(--font-size--1);
    }

    .external-icon {
      opacity: 0.6;
      width: 14px;
      height: 14px;
    }
  }

  @keyframes slideIn {
    from {
      transform: translateY(-8px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  // Focus management
  .language-picker-trigger:focus,
  .language-option:focus {
    @include outline;
  }

  // Dark mode adjustments
  :global(.darkmode) {
    .language-picker-menu {
      border-color: var(--border-color-subtle);
      background-color: var(--background-color);
    }
  }
</style>
