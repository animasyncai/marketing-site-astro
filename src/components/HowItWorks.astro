---
/**
 * HowItWorks Component - Complete Implementation
 *
 * @description Emotional journey-focused explanation of how Withinly works
 * with proper translations and accessibility
 */

import { Icon } from 'astro-icon/components'
import Button from './Button.astro'
import { getTranslationsFromUrl, getTranslation } from '../utils/useTranslation.js'

interface Props {
  class?: string
}

const { class: className } = Astro.props

// Get translations for current language
const translations = await getTranslationsFromUrl(Astro.url.pathname)
const t = (key: string, fallback = '') => {
  return getTranslation(translations, key, {}, fallback)
}

// Journey phases with emotional resonance
const journey = [
  {
    phase: t('howItWorks.phase1'),
    title: t('howItWorks.step1.title'),
    description: t('howItWorks.step1.description'),
    emotion: t('howItWorks.step1.emotion'),
    icon: 'lucide:compass',
    gradient: 'from-blue-100 to-blue-200',
    iconColor: 'text-blue-600',
    number: 1,
  },
  {
    phase: t('howItWorks.phase2'),
    title: t('howItWorks.step2.title'),
    description: t('howItWorks.step2.description'),
    emotion: t('howItWorks.step2.emotion'),
    icon: 'lucide:heart',
    gradient: 'from-purple-100 to-purple-200',
    iconColor: 'text-primary',
    number: 2,
  },
  {
    phase: t('howItWorks.phase3'),
    title: t('howItWorks.step3.title'),
    description: t('howItWorks.step3.description'),
    emotion: t('howItWorks.step3.emotion'),
    icon: 'lucide:message-circle',
    gradient: 'from-green-100 to-green-200',
    iconColor: 'text-green-600',
    number: 3,
  },
  {
    phase: t('howItWorks.phase4'),
    title: t('howItWorks.step4.title'),
    description: t('howItWorks.step4.description'),
    emotion: t('howItWorks.step4.emotion'),
    icon: 'lucide:trending-up',
    gradient: 'from-indigo-100 to-indigo-200',
    iconColor: 'text-indigo-600',
    number: 4,
  },
]
---

<section id="how-it-works" class:list={[className, 'py-24 bg-gradient-to-br from-gray-50 to-blue-50/30']} aria-labelledby="how-it-works-headline">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    
    <!-- Header with emotional framing -->
    <div class="text-center mb-8">
      <h2 id="how-it-works-headline" class="text-4xl sm:text-5xl font-bold text-gray-900 mb-6">
        {t('howItWorks.headline')}
      </h2>
      <p class="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
        {t('howItWorks.subheadline')}
      </p>
    </div>

          <!-- At a glance -->
      <div class="mx-auto mb-20 max-w-4xl">
        <h3 class="mb-4 text-center text-lg font-semibold text-gray-900 hidden">
          {t('howItWorks.atAGlance.title')}
        </h3>
        <ul class="grid grid-cols-2 gap-3 text-sm text-gray-700 sm:grid-cols-2 md:grid-cols-4">
          {
            (translations as any).howItWorks?.atAGlance?.items?.map((item: string) => (
              <li class="flex items-center gap-2 rounded-lg bg-white/70 px-3 py-2 ring-1 ring-gray-200/60">
                <Icon name="lucide:check" class="h-4 w-4 text-green-600" />
                <span class="leading-snug">{item}</span>
              </li>
            )) || []
          }
        </ul>
      </div>

    <!-- Journey visualization -->
    <div class="relative">     
      <!-- Connecting path for desktop -->
      <div class="hidden lg:block absolute top-11 left-0 right-0 h-0.5 bg-gradient-to-r from-blue-200 via-purple-200 via-green-200 to-indigo-200 opacity-60" aria-hidden="true"></div>
      
      <!-- Journey steps -->
      <div class="grid md:grid-cols-2 lg:grid-cols-4 gap-8 lg:gap-6">
        {journey.map((step, index) => (
          <div class="group relative" data-step={step.number}>
            
            <!-- Phase indicator -->
            <div class="text-center mb-6">
              <div class="inline-block mb-3 relative">
                <div class={`w-20 h-20 bg-gradient-to-br ${step.gradient} rounded-2xl flex items-center justify-center shadow-lg group-hover:shadow-xl transition-all duration-300 group-hover:scale-105 relative z-10`}>
                  <Icon name={step.icon} class={`w-10 h-10 ${step.iconColor}`} />
                </div>
                
                <!-- Step number -->
                <div class="absolute -top-2 -right-2 w-8 h-8 bg-white border-2 border-gray-200 rounded-full flex items-center justify-center text-sm font-bold text-gray-700 shadow-sm z-20">
                  {step.number}
                </div>
              </div>
              
              <div class="text-sm font-medium text-gray-500 uppercase tracking-wider mb-2">
                {step.phase}
              </div>
            </div>

            <!-- Content -->
            <div class="text-center space-y-4">
              <h3 class="text-xl font-semibold text-gray-900 group-hover:text-primary transition-colors leading-tight">
                {step.title}
              </h3>
              
              <p class="text-gray-600 leading-relaxed">
                {step.description}
              </p>
              
              <!-- Emotional note -->
              <div class="inline-flex items-center gap-2 px-3 py-1 bg-white/70 rounded-full text-sm text-gray-500 border border-gray-200/50">
                <Icon name="lucide:heart" class="w-3 h-3 text-pink-400" />
                <span class="italic font-medium">{step.emotion}</span>
              </div>
            </div>

            <!-- Step connector for mobile/tablet -->
            {index < journey.length - 1 && (
              <div class="lg:hidden flex justify-center mt-8 mb-4">
                <div class="w-px h-8 bg-gradient-to-b from-gray-300 to-transparent" aria-hidden="true"></div>
                <Icon name="lucide:chevron-down" class="w-5 h-5 text-gray-300 -ml-2.5 bg-gray-50 rounded-full p-0.5" />
              </div>
            )}
          </div>
        ))}
      </div>
    </div>

    <!-- Bottom insight section -->
    <div class="text-center mt-20">
      <div class="bg-white/60 backdrop-blur-sm rounded-2xl p-8 border border-gray-200/50 max-w-4xl mx-auto">
        <div class="flex items-center justify-center mb-4">
          <div class="w-12 h-12 bg-gradient-to-br from-purple-100 to-blue-100 rounded-xl flex items-center justify-center">
            <Icon name="lucide:lightbulb" class="w-6 h-6 text-primary" />
          </div>
        </div>
        
        <h3 class="text-2xl font-semibold text-gray-900 mb-4">
          {t('howItWorks.insight.title')}
        </h3>
        
        <p class="text-lg text-gray-600 max-w-2xl mx-auto leading-relaxed mb-6">
          {t('howItWorks.insight.description')}
        </p>
        
        <!-- Call to action -->
        <Button 
          href="#early-access" 
          variant="primary" 
          size="lg" 
          icon="lucide:arrow-right"
          iconPosition="right"
        >
          {t('howItWorks.cta', 'Join Early Access')}
        </Button>
      </div>
    </div>

  </div>
</section>

<style lang="scss">
  @use '../assets/scss/base/breakpoint' as *;
  @use '../assets/scss/base/mixins' as *;

  // Section styling
  #how-it-works {
    position: relative;
    overflow: hidden;

    // Subtle background pattern
    &::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-image: radial-gradient(circle at 20% 50%, rgba(168, 85, 247, 0.05) 0%, transparent 50%),
                        radial-gradient(circle at 80% 20%, rgba(59, 130, 246, 0.05) 0%, transparent 50%),
                        radial-gradient(circle at 40% 80%, rgba(34, 197, 94, 0.05) 0%, transparent 50%);
      pointer-events: none;
    }
  }

  // Journey step animations
  [data-step] {
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp 0.6s ease-out forwards;
    
    @for $i from 1 through 4 {
      &:nth-child(#{$i}) {
        animation-delay: #{($i - 1) * 0.15}s;
      }
    }
  }

  // Hover effects for step items
  .group {
    &:hover {
      .text-xl {
        transform: translateY(-2px);
      }
    }
  }

  // Enhanced icon animations
  [data-icon] {
    transition: all var(--animation-speed-medium) var(--cubic-bezier);
  }

  .group:hover [data-icon] {
    transform: scale(1.1) rotate(5deg);
  }

  // Connecting line enhancement on hover
  .group:hover ~ .group::before {
    content: '';
    position: absolute;
    top: 46px;
    left: -50%;
    width: 100%;
    height: 2px;
    background: linear-gradient(90deg, transparent, var(--color-primary-300), transparent);
    transform: translateY(-50%);
    z-index: 5;

    @include breakpoint(l) {
      display: block;
    }
  }

  // Responsive adjustments
  @include breakpoint(l) {
    .grid {
      position: relative;
    }
  }

  // Animation keyframes
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  // Accessibility improvements
  @media (prefers-reduced-motion: reduce) {
    [data-step] {
      animation: none;
      opacity: 1;
      transform: none;
    }
    
    .group:hover [data-icon] {
      transform: none;
    }
    
    * {
      transition: none;
    }
  }

  // High contrast mode
  @media (prefers-contrast: high) {
    .bg-gradient-to-br {
      border: 2px solid currentColor;
    }
    
    .text-gray-500,
    .text-gray-600 {
      color: currentColor;
    }
  }

  // Focus management for accessibility
  .group:focus-within {
    .text-xl {
      @include outline;
      outline-offset: 4px;
      border-radius: var(--radius-s);
    }
  }
</style>