---
import DefaultLayout from '../layouts/DefaultLayout.astro'

const pageTitle = 'Trait Reflection Demo'
const pageDescription = 'Test reflection outputs and behavioral profiles across traits'
---

<DefaultLayout title={pageTitle} description={pageDescription}>
  <main class="mx-auto max-w-4xl py-12">
    <h1 class="mb-6 text-2xl font-bold">Trait Reflection Demo</h1>

    <div class="grid gap-6 md:grid-cols-2">
      <!-- Input Form -->
      <div class="space-y-4">
        <form id="reflectionForm" class="space-y-4 rounded-xl bg-white p-6 shadow">
          <!-- Language Selector -->
          <div>
            <label class="mb-2 block font-medium">Language</label>
            <select id="locale" class="w-full rounded border p-2">
              <option value="en">English</option>
              <option value="lt">Lithuanian</option>
            </select>
          </div>

          <!-- Trait Selector -->
          <div>
            <label class="mb-2 block font-medium">Trait</label>
            <select id="trait" class="w-full rounded border p-2">
              <option value="">Select trait</option>
              <option value="attachment">Attachment</option>
              <option value="loveLanguage">Love Language</option>
              <option value="mindfulness">Mindfulness</option>
              <option value="selfAcceptance">Self-Acceptance</option>
            </select>
          </div>

          <!-- Dynamic trait-specific fields -->
          <div id="traitOptions" class="space-y-4"></div>

          <div class="space-y-2">
            <button
              type="button"
              id="generateAll"
              class="w-full rounded bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 disabled:bg-gray-400"
            >
              Generate Reflection & Profile
            </button>
          </div>
        </form>
      </div>

      <!-- Output Area -->
      <div class="space-y-4">
        <!-- User Reflection Output -->
        <div class="rounded-lg bg-blue-50 p-6">
          <h3 class="mb-3 font-semibold text-blue-900">User Reflection</h3>
          <div id="reflectionsOutput" class="text-sm whitespace-pre-line text-blue-800">
            Select a trait and generate to see results...
          </div>
        </div>

        <!-- Behavioral Profile Output -->
        <div class="rounded-lg bg-green-50 p-6">
          <h3 class="mb-3 font-semibold text-green-900">Behavioral Profile (Always English)</h3>
          <div id="behavioralOutput" class="text-sm whitespace-pre-line text-green-800">
            Select a trait and generate to see results...
          </div>
        </div>
      </div>
    </div>
  </main>

  <script>
    import('../trait-report-demo/index.js')
      .then((module) => {
        const { generateTraitReflection } = module
        console.log('Module loaded successfully')

        function toggleTraitOptions() {
          const traitSelect = document.getElementById('trait')
          const trait = traitSelect?.value
          const container = document.getElementById('traitOptions')
          if (!container) return

          container.innerHTML = ''
          if (!trait) return

          if (trait === 'attachment') {
            container.innerHTML = `
            <div>
              <label class="block mb-2 font-medium">Primary Attachment Type</label>
              <select id="attachmentType" class="w-full border rounded p-2">
                <option value="ANXIOUS">Anxious</option>
                <option value="AVOIDANT">Avoidant</option>
                <option value="DISORGANIZED">Disorganized</option>
                <option value="SECURE">Secure</option>
              </select>
            </div>
            <div>
              <label class="block mb-2 font-medium">Primary Intensity</label>
              <select id="intensity" class="w-full border rounded p-2">
                <option value="VERY_MILD">Very Mild</option>
                <option value="MILD">Mild</option>
                <option value="MODERATE">Moderate</option>
                <option value="STRONG">Strong</option>
              </select>
            </div>
            <div>
              <label class="block mb-2 font-medium">Secondary Type (Optional)</label>
              <select id="secondary" class="w-full border rounded p-2">
                <option value="">None</option>
                <option value="ANXIOUS">Anxious</option>
                <option value="AVOIDANT">Avoidant</option>
                <option value="DISORGANIZED">Disorganized</option>
                <option value="SECURE">Secure</option>
              </select>
            </div>
            <div>
              <label class="block mb-2 font-medium">Secondary Intensity</label>
              <select id="secondaryIntensity" class="w-full border rounded p-2">
                <option value="VERY_MILD">Very Mild</option>
                <option value="MILD">Mild</option>
                <option value="MODERATE">Moderate</option>
                <option value="STRONG">Strong</option>
              </select>
            </div>
          `
          }

          if (trait === 'loveLanguage') {
            container.innerHTML = `
            <div>
              <label class="block mb-2 font-medium">Primary Love Language</label>
              <select id="llPrimary" class="w-full border rounded p-2">
                <option value="QUALITY_TIME">Quality Time</option>
                <option value="WORDS_OF_AFFIRMATION">Words of Affirmation</option>
                <option value="ACTS_OF_SERVICE">Acts of Service</option>
                <option value="GIFTS">Gifts</option>
                <option value="PHYSICAL_TOUCH">Physical Touch</option>
              </select>
            </div>
            <div>
              <label class="block mb-2 font-medium">Secondary (Optional)</label>
              <select id="llSecondary" class="w-full border rounded p-2">
                <option value="">None</option>
                <option value="QUALITY_TIME">Quality Time</option>
                <option value="WORDS_OF_AFFIRMATION">Words of Affirmation</option>
                <option value="ACTS_OF_SERVICE">Acts of Service</option>
                <option value="GIFTS">Gifts</option>
                <option value="PHYSICAL_TOUCH">Physical Touch</option>
              </select>
            </div>
            <div>
              <label class="block mb-2 font-medium">Distribution</label>
              <select id="llDistribution" class="w-full border rounded p-2">
                <option value="DOMINANT">Dominant</option>
                <option value="DUAL">Dual</option>
                <option value="MULTIPLE">Multiple</option>
              </select>
            </div>
            <div>
              <label class="block mb-2 font-medium">Expression Archetype</label>
              <select id="llArchetype" class="w-full border rounded p-2">
                <option value="VISIONARY">Visionary</option>
                <option value="ARTIST">Artist</option>
                <option value="HEALER">Healer</option>
                <option value="TEACHER">Teacher</option>
                <option value="CHILD">Child</option>
              </select>
            </div>
          `
          }

          if (trait === 'mindfulness') {
            container.innerHTML = `
            <div>
              <label class="block mb-2 font-medium">Mindfulness Level</label>
              <select id="mindfulnessLevel" class="w-full border rounded p-2">
                <option value="LOW_MINDFULNESS">Low Mindfulness</option>
                <option value="MODERATE_MINDFULNESS">Moderate Mindfulness</option>
                <option value="GOOD_MINDFULNESS">Good Mindfulness</option>
                <option value="HIGH_MINDFULNESS">High Mindfulness</option>
              </select>
            </div>
            <div>
              <label class="block mb-2 font-medium">Awareness Level</label>
              <select id="awarenessLevel" class="w-full border rounded p-2">
                <option value="LOW_AWARENESS">Low Awareness</option>
                <option value="MODERATE_AWARENESS">Moderate Awareness</option>
                <option value="GOOD_AWARENESS">Good Awareness</option>
                <option value="HIGH_AWARENESS">High Awareness</option>
              </select>
            </div>
          `
          }

          if (trait === 'selfAcceptance') {
            container.innerHTML = `
            <div>
              <label class="block mb-2 font-medium">Self-Acceptance Level</label>
              <select id="saLevel" class="w-full border rounded p-2">
                <option value="BEGINNING_SELF_ACCEPTANCE">Beginning Self-Acceptance</option>
                <option value="DEVELOPING_SELF_ACCEPTANCE">Developing Self-Acceptance</option>
                <option value="GROWING_SELF_ACCEPTANCE">Growing Self-Acceptance</option>
                <option value="INTEGRATED_SELF_ACCEPTANCE">Integrated Self-Acceptance</option>
              </select>
            </div>
            <div>
              <label class="block mb-2 font-medium">Openness to Change (Optional)</label>
              <select id="saOpenness" class="w-full border rounded p-2">
                <option value="">None</option>
                <option value="RESTING_PHASE">Resting Phase</option>
                <option value="MIXED_FEELINGS">Mixed Feelings</option>
                <option value="READY_TO_GROW">Ready to Grow</option>
                <option value="DEEP_EXPLORATION">Deep Exploration</option>
              </select>
            </div>
          `
          }
        }

        function getTraitData() {
          const trait = document.getElementById('trait')?.value
          if (!trait) return null

          if (trait === 'attachment') {
            const primary = document.getElementById('attachmentType')?.value
            const primaryIntensity = document.getElementById('intensity')?.value
            const secondary = document.getElementById('secondary')?.value
            const secondaryIntensity = document.getElementById('secondaryIntensity')?.value

            if (!primary || !primaryIntensity) return null

            return {
              primary,
              primaryIntensity,
              secondary: secondary || null,
              secondaryIntensity: secondary ? secondaryIntensity : null,
            }
          }

          if (trait === 'loveLanguage') {
            const primary = document.getElementById('llPrimary')?.value
            const secondary = document.getElementById('llSecondary')?.value
            const distribution = document.getElementById('llDistribution')?.value
            const expressionArchetype = document.getElementById('llArchetype')?.value
            if (!primary) return null

            return {
              primary,
              secondary: secondary || null,
              distribution,
              expressionArchetype,
            }
          }

          if (trait === 'mindfulness') {
            const mindfulnessLevel = document.getElementById('mindfulnessLevel')?.value
            const awarenessLevel = document.getElementById('awarenessLevel')?.value
            if (!mindfulnessLevel || !awarenessLevel) return null
            return {
              mindfulnessLevel,
              awarenessLevel,
            }
          }

          if (trait === 'selfAcceptance') {
            const level = document.getElementById('saLevel')?.value
            const openness_to_change = document.getElementById('saOpenness')?.value
            if (!level) return null
            return {
              level,
              openness_to_change: openness_to_change || null,
            }
          }

          return null
        }

        function generateAll() {
          const trait = document.getElementById('trait')?.value
          const locale = document.getElementById('locale')?.value || 'en'
          const traitData = getTraitData()

          if (!trait || !traitData) {
            alert('Please select a trait and fill in all required fields')
            return
          }

          try {
            console.log('Generating reflection for:', trait, locale, traitData)
            const result = generateTraitReflection(trait, traitData, locale)
            console.log('Result:', result)

            const reflectionsOutput = document.getElementById('reflectionsOutput')
            const behavioralOutput = document.getElementById('behavioralOutput')

            if (reflectionsOutput) {
              reflectionsOutput.innerText = result.userReport
            }

            if (behavioralOutput) {
              behavioralOutput.innerText = result.behavioralProfile
            }
          } catch (error) {
            alert(`Error: ${error.message}`)
            console.error(error)
          }
        }

        // Hook up listeners
        document.getElementById('trait')?.addEventListener('change', toggleTraitOptions)
        document.getElementById('generateAll')?.addEventListener('click', generateAll)

        console.log('Event listeners attached')
      })
      .catch((error) => {
        console.error('Failed to load module:', error)
        alert('Failed to load trait reflection module: ' + error.message)
      })
  </script>
</DefaultLayout>
